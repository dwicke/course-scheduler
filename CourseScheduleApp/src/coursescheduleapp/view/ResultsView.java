package coursescheduleapp.view;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Observable;
import java.util.Observer;

import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.event.HyperlinkEvent;
import javax.swing.event.HyperlinkListener;
import javax.swing.text.BadLocationException;
import javax.swing.text.Style;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyleContext;
import javax.swing.text.StyledDocument;

import coursescheduleapp.model.Course;
import coursescheduleapp.model.Day;
import coursescheduleapp.model.Model;
import coursescheduleapp.model.Schedule;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ResultsView.java
 *
 * Created on Apr 6, 2010, 7:24:44 PM
 */


/**
 * This code was edited or generated using CloudGarden's Jigloo
 * SWT/Swing GUI Builder, which is free for non-commercial
 * use. If Jigloo is being used commercially (ie, by a corporation,
 * company or business for any purpose whatever) then you
 * should purchase a license for each developer using Jigloo.
 * Please visit www.cloudgarden.com for details.
 * Use of Jigloo implies acceptance of these licensing terms.
 * A COMMERCIAL LICENSE HAS NOT BEEN PURCHASED FOR
 * THIS MACHINE, SO JIGLOO OR THIS CODE CANNOT BE USED
 * LEGALLY FOR ANY CORPORATE OR COMMERCIAL PURPOSE.
 */
/**
 *
 * @author Drew
 */
public class ResultsView extends javax.swing.JPanel implements Observer, ActionListener, HyperlinkListener {

	private Model model;
	private ResultsController control;
	private ArrayList<JButton> removeBt;
	private ArrayList<Course> courseResults;
	private SchedViewI schedViewChoice;

	/** Creates new form ResultsView */
	public ResultsView() {
		initComponents();
	}

	public void setModel(Model model)
	{
		this.model = model;
		this.model.addObserver(this);
		removeBt = new ArrayList<JButton>();
		control = new ResultsController();
		schedViewChoice = new OrderedSchedView();
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTextPane = new javax.swing.JTextPane();
		jTextPane.setEditable(false);
		jTextPane.setEditorKit(new javax.swing.text.html.HTMLEditorKit());
		jTextPane.setDocument(new javax.swing.text.html.HTMLDocument());
		
		
		jTextPane.addHyperlinkListener(this);

		printTxtPane = new javax.swing.JTextPane();
		printTxtPane.setContentType("text/html");

		setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));
		jTextPane.setContentType("text/html");
		
		jTextPane.setStyledDocument(new javax.swing.text.html.HTMLDocument());
		

		jScrollPane1.setViewportView(jTextPane);


		add(jScrollPane1);

		fileChooser = new javax.swing.JFileChooser();
	}// </editor-fold>//GEN-END:initComponents


	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JScrollPane jScrollPane1;
	// Need PrintTxtPane in order to print other wise embedded buttons will disappear
	private javax.swing.JTextPane jTextPane, printTxtPane;
	private javax.swing.JFileChooser fileChooser;

	// End of variables declaration//GEN-END:variables
	@Override
	public void update(Observable o, Object arg) {
		// TODO Auto-generated method stub
		Schedule sched = model.getBestSchedule();

		jTextPane.setText("");
		printTxtPane.setText("");
		removeBt.clear();

		for (int i = 0; i < removeBt.size(); i++)
		{
			jTextPane.remove(removeBt.get(i));
			System.out.println("Button Removed");
		}
		jTextPane.validate();



		Iterator<Course> it = sched.getCourses().iterator();

		if (it.hasNext() == false)
		{
			try {
				jTextPane.getStyledDocument().insertString(jTextPane.getStyledDocument().getLength(), "Sorry, no schedule can be created.", null);
				printTxtPane.getStyledDocument().insertString(printTxtPane.getStyledDocument().getLength(), "Sorry, no schedule can be created.", null);
			} catch (BadLocationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}
		else 
		{
			//courseResults = control.orderCoursesByDay(sched);
			courseResults = (ArrayList<Course>) schedViewChoice.orderSched(sched);
			it = courseResults.iterator();
			
			
			int i = 0;
			while(it.hasNext())
			{
				Course course = it.next();
				if (course != null)
				{
					
					//control.getResults(course, jTextPane.getStyledDocument());
					//control.getResults(course, printTxtPane.getStyledDocument());
					schedViewChoice.getResults(course, jTextPane.getStyledDocument());
					schedViewChoice.getResults(course, printTxtPane.getStyledDocument());
					try {
						jTextPane.getStyledDocument().insertString(jTextPane.getStyledDocument().getLength(), "   ", null);
						printTxtPane.getStyledDocument().insertString(printTxtPane.getStyledDocument().getLength(), "   ", null);

					} catch (BadLocationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}

					//Position p = jTextPane.getStyledDocument().getEndPosition();
					jTextPane.setCaretPosition(jTextPane.getStyledDocument().getLength());
					if (!control.checkIfLast(course, model))
					{
						System.out.println("ISJDFOIJSDOFH");
						JButton bt = new JButton("Remove");
						bt.addActionListener(this);
						bt.setActionCommand(i + "");
						removeBt.add(bt);
						jTextPane.insertComponent(bt);
					}

					try {
						jTextPane.getStyledDocument().insertString(jTextPane.getStyledDocument().getLength(), "\n\n", null);
						printTxtPane.getStyledDocument().insertString(printTxtPane.getStyledDocument().getLength(), "\n\n", null);

					} catch (BadLocationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				else
				{
					try {
						// Create a bold style
						StyledDocument doc = jTextPane.getStyledDocument();
						Style def = StyleContext.getDefaultStyleContext().getStyle( StyleContext.DEFAULT_STYLE );
						Style regular = doc.addStyle( "regular", def );
						
						Style bold = doc.addStyle( "bold", regular );
						StyleConstants.setBold( bold, true );
						
						jTextPane.getStyledDocument().insertString(jTextPane.getStyledDocument().getLength(), Day.values()[i].toString()+"\n\n", bold);
						printTxtPane.getStyledDocument().insertString(printTxtPane.getStyledDocument().getLength(), Day.values()[i].toString()+"\n\n", bold);

					} catch (BadLocationException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
					i++;
				}
				
			}
		}


	}

	@Override
	public void actionPerformed(ActionEvent arg0) {
		// TODO Auto-generated method stub
		
		int index = Integer.parseInt(arg0.getActionCommand());
		System.out.println("Button " + index );
		//control.removeCourse(model.getBestSchedule().getCourses().get(index), model, index);
		control.removeCourse(courseResults.get(index), model);
		
		
		model.createBestSchedule();

	}

	public void setView(SchedViewI newView)
	{
		schedViewChoice = newView;
		if (model.getBestSchedule() != null)
		{
			update(null,null);
		}
	}
	
	public void save() {
		// TODO Auto-generated method stub
		int fileChoosen = fileChooser.showSaveDialog(null);

		if (fileChoosen == JFileChooser.APPROVE_OPTION)
		{

			try {
				control.save(fileChooser.getSelectedFile(), printTxtPane.getStyledDocument().getText(0, printTxtPane.getStyledDocument().getLength()));
			} catch (BadLocationException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

	}

	public void print() {
		// TODO Auto-generated method stub
		control.print(printTxtPane);


	}

	@Override
	public void hyperlinkUpdate(HyperlinkEvent arg0) {
		// TODO Auto-generated method stub
		
		if(arg0.getEventType() == HyperlinkEvent.EventType.ACTIVATED ){
		    // TODO add your handling code here:
			
		      try{
		    	  
		    	  String url = arg0.getURL().toString();
		    	
		  		try {
		  			
		  			java.awt.Desktop.getDesktop().browse(java.net.URI.create(url));
		  		} catch (IOException e) {
		  			// TODO Auto-generated catch block
		  			e.printStackTrace();
		  		}
		      }catch(Exception e){


		}
		}
		
		
	}

}
