package coursescheduleapp.view;

import coursescheduleapp.model.CourseCollectionDB;
import coursescheduleapp.model.CourseSelection;
import coursescheduleapp.model.Subscriber;

import java.rmi.RemoteException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Set;
import java.util.TreeSet;

import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.PopupMenuListener;
import javax.swing.event.PopupMenuEvent;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CourseSelectView.java
 *
 * Created on Apr 6, 2010, 7:15:56 PM
 */


/**
 *
 * @author Drew
 */
public class CourseSelectView extends javax.swing.JPanel implements ListSelectionListener, Subscriber {


	private CourseSelection courseSelect;
	private int whichCourse, whichEquiv;

	private CourseCollectionDB courseDB;
	private CourseSelectControl control;
	private javax.swing.DefaultListModel model;

	/** Creates new form CourseSelectView */
	public CourseSelectView() {
		model = new javax.swing.DefaultListModel();

		initComponents();
	}


	public void setCoursePref(CourseSelection courseSelect, int whichCourse, int whichEquiv, CourseCollectionDB courseDB) throws SQLException
	{
		this.courseSelect = courseSelect;
		this.whichCourse = whichCourse;
		this.whichEquiv = whichEquiv;
		this.courseDB = courseDB;
		try {
			this.courseDB.addSubscriber(this);
		} catch (RemoteException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		control = new CourseSelectControl(courseSelect, whichCourse, whichEquiv, courseDB);
		
		java.util.List<String> sem = courseDB.getAllSemesters();
		courseDB.setSemester(sem.get(sem.size()-1));

		ArrayList<String> allCourse = new ArrayList<String>();
		allCourse.add("Choose Course");
		try {
			allCourse.addAll(courseDB.getAllCourseNames());
			CourseLS.setModel(new javax.swing.DefaultComboBoxModel(allCourse.toArray()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		CourseLS = new javax.swing.JComboBox();
		jScrollPane1 = new javax.swing.JScrollPane();
		InstructorPrefLs = new javax.swing.JList();

		setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.Y_AXIS));

		//CourseLS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
		CourseLS.setModel(new javax.swing.DefaultComboBoxModel(new String[] { }));
		CourseLS.addPopupMenuListener(new FinalSelectionListener());

		add(CourseLS);

		//CourseLS.addItemListener(this);
		InstructorPrefLs.setModel(model);
		InstructorPrefLs.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

		InstructorPrefLs.setVerifyInputWhenFocusTarget(false);
		InstructorPrefLs.setVisibleRowCount(2);
		jScrollPane1.setViewportView(InstructorPrefLs);
		InstructorPrefLs.addListSelectionListener(this);

		add(jScrollPane1);
	}// </editor-fold>//GEN-END:initComponents



	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JComboBox CourseLS;
	private javax.swing.JList InstructorPrefLs;
	private javax.swing.JScrollPane jScrollPane1;
	// End of variables declaration//GEN-END:variables

	/*
	 * Both the FinalSelectionListener and selectionChanged method was taken from 
	 * http://72.5.124.102/thread.jspa?threadID=5361967
	 *    	
	 * Re: A clear workaround for JComboBox bug 4199622 please.    [10 Duke Stars rewarded]   
	 * Jan 21, 2009 2:17 AM (reply 1 of 2)  (In reply to original post )
	 * 
	 * as a work around for the bug described here
	 * http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4199622
	 * 
	 */
	private class FinalSelectionListener implements PopupMenuListener {
		private Object oldSelectedItem;

		public void popupMenuWillBecomeInvisible(PopupMenuEvent e) {
			Object newSelectedItem = CourseLS.getSelectedItem().toString();

			if(newSelectedItem != oldSelectedItem) {

				selectionChanged(newSelectedItem, oldSelectedItem);
				oldSelectedItem = newSelectedItem;
			}
		}

		public void popupMenuWillBecomeVisible(PopupMenuEvent e) {}
		public void popupMenuCanceled(PopupMenuEvent e) {}
	}
	private void selectionChanged(Object changedTo, Object oldSelectedItem) {
		//System.out.println("The selection was changed to: " + changedTo);
		control.removeCourse((String) oldSelectedItem);
		model.clear();
		
		final String selected = (String)changedTo;
		if (!selected.equals("Choose Course"))
		{
			//System.out.println("HI " + selected);
			try {
				control.setCourse(selected);
			} catch (SQLException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}

			Iterator<String> it;
			try {
				it = courseDB.getInstructors(selected).iterator();
				model.addElement("Choose Preferred Instructor");
				while(it.hasNext())
				{
					model.addElement(it.next());
				}
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

		}




	}


	@Override
	public void valueChanged(ListSelectionEvent e) {
		// TODO Auto-generated method stub

		if (e.getValueIsAdjusting() == false) {

			Object[] names = InstructorPrefLs.getSelectedValues();

			Set<String> setNames = new TreeSet<String>();
			for(int i = 0; i < names.length; i++)
			{

				String t = (String) names[i];
				if (!t.equals("Choose Preferred Instructor"))
				{
					setNames.add(t);
				}
			}
			control.setInstructor(setNames);

		}
	}



	@Override
	public void update(Object pub, Object code) throws RemoteException {
		// TODO Auto-generated method stub


		//System.out.println("HI " + code);
		// Now update using the CourseSelectControl
		control.clearCourseSelection();
		model.clear();
		try {
			ArrayList<String> courseNames = new ArrayList<String>();
			courseNames.add("Choose Course");
			courseNames.addAll(courseDB.getAllCourseNames());
			
			CourseLS.setModel(new javax.swing.DefaultComboBoxModel(courseNames.toArray()));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}


	}

}
